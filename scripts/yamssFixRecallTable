#!/bin/ksh
############################################################################
# Copyright 2008-2012 Istituto Nazionale di Fisica Nucleare
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
############################################################################

# print PID for logger
echo $$

# Include global declarations and service routines.
. /usr/lpp/mmfs/bin/mmglobfuncs
. /usr/lpp/mmfs/bin/mmsdrfsdef

export device=$arg1

export mountpoint=$(cat /proc/mounts | grep "^$device " | awk '{print $2}')

. /usr/local/yamss/bin/yamssCommands

export SYSTEM_DIRECTORY_PATH=$mountpoint/system

if [ ! -f $mountpoint/system/YAMSS_CONFIG/hsmConfig ]; then
  echo "Error: missing hsmConfig file in system directory"
  cleanupAndExit 0        
fi

. $mountpoint/system/YAMSS_CONFIG/hsmConfig

# read last report time
LASTREPORT=$(cat $SYSTEM_DIRECTORY_PATH/YAMSS_STAT/lastrecallcheck 2>/dev/null)
if [ "$LASTREPORT"x == "x" ]; then
  LASTREPORT=$(date +"%Y %B %A %_d %_H %_M %_S")
  echo $LASTREPORT > $SYSTEM_DIRECTORY_PATH/YAMSS_STAT/lastrecallcheck
fi

NOW=$(date +"%Y %B %A %_d %_H %_M %_S")
NOWEPOCH=$(date +%s)
let PREVEPOCH=$NOWEPOCH-86400

DAYLAST=$(echo $LASTREPORT | awk '{print $4}')
DAYNOW=$(echo $NOW | awk '{print $4}')
HOURNOW=$(echo $NOW | awk '{print $5}')

if [ "$HOURNOW"x = "$RECALL_TABLE_CHECK_HOUR"x -a "$DAYNOW"x != "$DAYLAST"x ]; then

  echo "Checking StoRM recall table"

  echo $NOW > $SYSTEM_DIRECTORY_PATH/YAMSS_STAT/lastrecallcheck
  {
    rm -f /tmp/recall_missing_files.txt; touch /tmp/recall_missing_files.txt
    rm -f /tmp/recall_successful.txt; touch /tmp/recall_successful.txt
    rm -f /tmp/recall_resubmit.txt; touch /tmp/recall_resubmit.txt

    curl -s -S -H "Token:$STORM_BACKEND_TOKEN" -X GET http://$STORM_BACKEND_NODE:9998/recalltable/task?maxResults=$RECALL_TABLE_MAX_RESULTS | tr '#' '\n' | tr "{" " " | tr "}" " " | awk '(match($4,"BOL")||match($4,"PTG"))&&match($9,"IN_PROGRESS") {print $0}' > /tmp/recall_table.txt

    for file in $(cat /tmp/recall_table.txt | awk '{print $5}' | sort -u ); do
      if ! egrep " $file$" $mountpoint/system/YAMSS_RECALL/* >/dev/null 2>&1; then
        if [ ! -f $file ]; then
          echo "$file not found on disk. To be removed from recall table"
          echo $file >> /tmp/recall_missing_files.txt
        else
          status=$(/usr/local/yamss/bin/yamssLs $file | cut -c1)
          if [ "$status"x = "px" ]; then
            echo "$file already on disk. Recall to be set as successful"
            echo $file >> /tmp/recall_successful.txt
          elif [ "$status"x = "mx" ]; then
            echo "$file not recalled. Recall to be set resubmitted"
            echo $file >> /tmp/recall_resubmit.txt
          fi
        fi
      else
        echo "$file already in recall queue"
      fi
    done

    for taskid in $(for file in $(cat /tmp/recall_successful.txt); do grep -P "\t$file\t" /tmp/recall_table.txt | awk '{print $1}'; done); do
      echo File already on disk. Setting status success for taskid $taskid
      curl -s -S -H "Token:$STORM_BACKEND_TOKEN" -H "Content-Type: text/plain" -X PUT -d "status=0" http://$STORM_BACKEND_NODE:9998/recalltable/task/$taskid
    done

    for taskid in $(for file in $(cat /tmp/recall_missing_files.txt); do grep -P "\t$file\t" /tmp/recall_table.txt | awk '{print $1}'; done); do
      echo File removed from disk. Setting status failure for taskid $taskid
      curl -s -S -H "Token:$STORM_BACKEND_TOKEN" -H "Content-Type: text/plain" -X PUT -d "status=3" http://$STORM_BACKEND_NODE:9998/recalltable/task/$taskid
    done

    for file in $(cat /tmp/recall_resubmit.txt); do
      echo Resubmitting recall of $file
      /usr/local/yamss/bin/yamssRecall $file
    done

  }

fi

cleanupAndExit 0
