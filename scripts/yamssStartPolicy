#!/bin/ksh
############################################################################
# Copyright 2008-2012 Istituto Nazionale di Fisica Nucleare
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
############################################################################

# Include global declarations and service routines.
. /usr/lpp/mmfs/bin/mmglobfuncs
. /usr/lpp/mmfs/bin/mmsdrfsdef

export device=$arg1

export mountpoint=$(cat /proc/mounts | grep "^$device " | awk '{print $2}')

. /usr/local/yamss/bin/yamssCommands

export SYSTEM_DIRECTORY_PATH=$mountpoint/system

export GPFS_rshPath="/usr/bin/ssh"

export hostnam=$(hostname|cut -d. -f1)

{ 
     # print PID for logger
     echo $$

     if [ ! -f $mountpoint/system/YAMSS_CONFIG/hsmConfig ]; then
        echo "Error: missing hsmConfig file in system directory"
        cleanupAndExit 0        
     fi

     . $mountpoint/system/YAMSS_CONFIG/hsmConfig

     export GPFSSDRFILE=/var/mmfs/gen/mmsdrfs

     # Check if this is the owner node of the TSM failover group
     hostnam=$(hostname|cut -d. -f1)
     ownerid=$(cat $mountpoint/.SpaceMan/hsmfsconfig.xml | grep Ownernode | cut -d">" -f2 | cut -d"<" -f1)
     ownernode=$(cat $GPFSSDRFILE | grep ":20_MEMBER_NODE:" | cut -d: -f5,6 | grep "^$ownerid:" | cut -d: -f2)

     if [ "$ownernode"x = "x" -o "$hostnam"x = "x" -o "$ownernode"x != "$hostnam"x ]; then
       cleanupAndExit 0
     fi

     # remove stale migrate files if any
     rm -f $SYSTEM_DIRECTORY_PATH/YAMSS_MIGRATE/migrate.*
     rm -f $SYSTEM_DIRECTORY_PATH/YAMSS_MIGRATE/premigrate.*

     # read last scan time
     let LASTSCAN=$(cat $SYSTEM_DIRECTORY_PATH/YAMSS_STAT/lastscan 2>/dev/null)
     if [ $LASTSCAN"x" == "x" ]; then
        let LASTSCAN=$(date +%s)
        echo $LASTSCAN > $SYSTEM_DIRECTORY_PATH/YAMSS_STAT/lastscan
     fi

     let NOW=$(date +%s)
     let DELAY=$NOW-$LASTSCAN

     # if in draining, exit without scan
     if [ -f $SYSTEM_DIRECTORY_PATH/YAMSS_DRAIN/migrate.drain ]; then
        echo Drain file found while starting policy, giving up
        sleep 120
        cleanupAndExit 0
     fi
    
     if [ $DELAY -gt $MIGRATE_SCAN_FREQUENCY ]; then
        echo $NOW > $SYSTEM_DIRECTORY_PATH/YAMSS_STAT/lastscan

        if [ "$MIGRATE_SCAN_USE_PATH"x == "yesx" -a "$MIGRATE_SCAN_PATH"x != "x" ]; then
           NF=$(echo $MIGRATE_SCAN_PATH | awk 'BEGIN{FS=","}{print NF}')
           if [ $NF == 1 ]; then
             # make scan and prepare file list
             tmpdir=$(mktemp -d /var/tmp/yamssmigdir.XXXXXXXX)
             mkdir $tmpdir/garbagecollector
             mkdir $tmpdir/premigrate
             mkdir $tmpdir/intragpfs
             echo Performing preparatory scan
             $mmapplypolicy $mountpoint/$MIGRATE_SCAN_PATH -I prepare -s $tmpdir
             rc_1=$?
             mv $tmpdir/mmapplypolicy.*.migrate.TAPE\ MIGRATION* $tmpdir/garbagecollector
             mv $tmpdir/mmapplypolicy.*.premigrate.TAPE\ PREMIGRATION* $tmpdir/premigrate
             mv $tmpdir/mmapplypolicy.*.intragpfs $tmpdir/intragpfs

             # perform garbage collection step
             echo Performing garbage collection step
             $mmapplypolicy $mountpoint/$MIGRATE_SCAN_PATH -r $tmpdir/garbagecollector -m $GARBAGE_COLLECTOR_RUNNING_THREADS -B $GARBAGE_COLLECTOR_FILES_PER_THREAD -N $MIGRATE_NODE_LIST -s /var/tmp
             rc_2=$?

             # perform premigration step
             echo Performing premigration step
             $mmapplypolicy $mountpoint/$MIGRATE_SCAN_PATH -r $tmpdir/premigrate -m $MIGRATE_RUNNING_THREADS -B $MIGRATE_FILES_PER_THREAD -N $MIGRATE_NODE_LIST -s /var/tmp
             rc_3=$?

             # perform any intragpfs step on all NSD nodes
             echo Performing intragpfs step
             $mmapplypolicy $mountpoint/$MIGRATE_SCAN_PATH -r $tmpdir/intragpfs -m $MIGRATE_RUNNING_THREADS -B $MIGRATE_FILES_PER_THREAD -N $MIGRATE_NODE_LIST -s /var/tmp
             rc_4=$?

             # remove temporary directory
             rm -rf $tmpdir

           else
             echo $MIGRATE_SCAN_PATH | tr "," "\n" > /var/tmp/tapeDirList

             # make scan and prepare file list
             tmpdir=$(mktemp -d /var/tmp/yamssmigdir.XXXXXXXX)
             mkdir $tmpdir/garbagecollector
             mkdir $tmpdir/premigrate
             mkdir $tmpdir/intragpfs
             echo Performing preparatory scan
             $mmapplypolicy $device -i /var/tmp/tapeDirList -I prepare -s $tmpdir
             rc_1=$?
             mv $tmpdir/mmapplypolicy.*.migrate.TAPE\ MIGRATION* $tmpdir/garbagecollector
             mv $tmpdir/mmapplypolicy.*.premigrate.TAPE\ PREMIGRATION* $tmpdir/premigrate
             mv $tmpdir/mmapplypolicy.*.intragpfs $tmpdir/intragpfs

             # perform garbage collection step
             echo Performing garbage collection step
             $mmapplypolicy $device -r $tmpdir/garbagecollector -m $GARBAGE_COLLECTOR_RUNNING_THREADS -B $GARBAGE_COLLECTOR_FILES_PER_THREAD -N $MIGRATE_NODE_LIST -s /var/tmp
             rc_2=$?

             # perform premigration step
             echo Performing premigration step
             $mmapplypolicy $device -r $tmpdir/premigrate -m $MIGRATE_RUNNING_THREADS -B $MIGRATE_FILES_PER_THREAD -N $MIGRATE_NODE_LIST -s /var/tmp
             rc_3=$?

             # perform any intragpfs step on all NSD nodes
             echo Performing intragpfs step
             $mmapplypolicy $device -r $tmpdir/intragpfs -m $MIGRATE_RUNNING_THREADS -B $MIGRATE_FILES_PER_THREAD -N $MIGRATE_NODE_LIST -s /var/tmp
             rc_4=$?

             # remove temporary directory
             rm -rf $tmpdir

           fi
        else
           # make scan and prepare file list
           tmpdir=$(mktemp -d /var/tmp/yamssmigdir.XXXXXXXX)
           mkdir $tmpdir/garbagecollector
           mkdir $tmpdir/premigrate
           mkdir $tmpdir/intragpfs
           echo Performing preparatory scan
           $mmapplypolicy $device -I prepare -s $tmpdir
           rc_1=$?
           mv $tmpdir/mmapplypolicy.*.migrate.TAPE\ MIGRATION* $tmpdir/garbagecollector
           mv $tmpdir/mmapplypolicy.*.premigrate.TAPE\ PREMIGRATION* $tmpdir/premigrate
           mv $tmpdir/mmapplypolicy.*.intragpfs $tmpdir/intragpfs

           # perform garbage collection step
           echo Performing garbage collection step
           $mmapplypolicy $device -r $tmpdir/garbagecollector -m $GARBAGE_COLLECTOR_RUNNING_THREADS -B $GARBAGE_COLLECTOR_FILES_PER_THREAD -N $MIGRATE_NODE_LIST -s /var/tmp
           rc_2=$?

           # perform premigration step
           echo Performing premigration step
           $mmapplypolicy $device -r $tmpdir/premigrate -m $MIGRATE_RUNNING_THREADS -B $MIGRATE_FILES_PER_THREAD -N $MIGRATE_NODE_LIST -s /var/tmp
           rc_3=$?

           # perform any intragpfs step on all NSD nodes
           echo Performing intragpfs step
           $mmapplypolicy $device -r $tmpdir/intragpfs -m $MIGRATE_RUNNING_THREADS -B $MIGRATE_FILES_PER_THREAD -N $MIGRATE_NODE_LIST -s /var/tmp
           rc_4=$?

           # remove temporary directory
           rm -rf $tmpdir

        fi

        # If the command completed successfully, or if there is an
        # unacceptable error, there is nothing more we can do.
        if [[ $rc_1 -ne $MM_FsNotMounted && $rc_1 -ne $MM_NotSupported &&
              $rc_1 -ne $MM_DaemonDown   && $rc_1 -ne $MM_QuorumWait   ]]
        then 
          cleanupAndExit 0
        fi 

        if [[ $rc_2 -ne $MM_FsNotMounted && $rc_2 -ne $MM_NotSupported &&
              $rc_2 -ne $MM_DaemonDown   && $rc_2 -ne $MM_QuorumWait   ]]
        then
          cleanupAndExit 0
        fi

        if [[ $rc_3 -ne $MM_FsNotMounted && $rc_3 -ne $MM_NotSupported &&
              $rc_3 -ne $MM_DaemonDown   && $rc_3 -ne $MM_QuorumWait   ]]
        then
          cleanupAndExit 0
        fi

        if [[ $rc_4 -ne $MM_FsNotMounted && $rc_4 -ne $MM_NotSupported &&
              $rc_4 -ne $MM_DaemonDown   && $rc_4 -ne $MM_QuorumWait   ]]
        then
          cleanupAndExit 0
        fi

        # If we get here, it means that the node was not able to run mmapplypolicy
        print -- "$(date): $mmcmd: Failed to run mmapplypolicy $device"
     else
        let NEXT=$LASTSCAN+$MIGRATE_SCAN_FREQUENCY-$NOW
        echo $NEXT | awk '{mintime=$1/60; strmt=int(mintime+2); if(mintime<2) {strmt="2"}; print "Next filesystem scan expected in",strmt,"minutes"}'
        sleep 120
     fi
     cleanupAndExit 0

}

